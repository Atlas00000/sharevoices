version: '3.8'

# Production overrides for docker-compose.yml
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # Frontend client - production mode
  client:
    build:
      target: production
    restart: always
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.sharedvoices.com
    # No volumes in production

  # API Gateway - production mode
  api-gateway:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    # No volumes in production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Content Service - production mode
  content-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://mongodb-user:${MONGODB_PASSWORD}@mongodb:27017/content?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_REDIS=true
      - JWT_SECRET=${JWT_SECRET}
    # No volumes in production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # User Service - production mode
  user-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres-user
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=sharedvoices
      - JWT_SECRET=${JWT_SECRET}
    # No volumes in production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Interaction Service - production mode
  interaction-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://mongodb-user:${MONGODB_PASSWORD}@mongodb:27017/interaction?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_REDIS=true
      - JWT_SECRET=${JWT_SECRET}
    # No volumes in production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Notification Service - production mode
  notification-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres-user
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=sharedvoices
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_REDIS=true
      - JWT_SECRET=${JWT_SECRET}
    # No volumes in production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB - production mode
  mongodb:
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb-user
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL - production mode
  postgres:
    restart: always
    environment:
      - POSTGRES_USER=postgres-user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=sharedvoices
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - production mode
  redis:
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Elasticsearch - production mode
  elasticsearch:
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
