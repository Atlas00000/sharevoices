name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, content-service, user-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint --workspace=${{ matrix.service }}
      
      - name: Run tests
        run: npm run test --workspace=${{ matrix.service }}
      
      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push content service image
        uses: docker/build-push-action@v5
        with:
          context: ./server/services/content
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push user service image
        uses: docker/build-push-action@v5
        with:
          context: ./server/services/user
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            config/kubernetes/staging/*.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user:${{ github.sha }}

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            config/kubernetes/production/*.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user:${{ github.sha }} 